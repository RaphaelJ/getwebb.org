// Saves the original title (which will be updated during the upload)
var originalTitle = document.title;

// Shows/Hides the options menu.
$("#options_toggle").click(function () 
{
    $("#options_toggle").toggleClass("enabled");
    $("#options").slideToggle(100);
});

// Hides the upload form, start the upload and shows the uploads progress.
$("#upload_form").submit(function () 
{
    var files = document.getElementById("files").files;
    if (files.length < 1) {
        // Checks if at least a file as been selected for upload.
        showError("Please select at least one file to upload.");
    } else if ((larges = largeFiles(files)).length > 0) {
        // Checks if some files exceed the maximum file size.
        showError(
            "The following files exceed the maximum file size " +
            "(#{show $ PrettyFileSize maxFileSize}) :<br />" + 
            larges.join("<br />") + "."
        );
    } else if (!document.getElementById("email").checkValidity()) {
        // Checks if the email field is valid.
        showError("Please enter a valid email.");
    } else {
        $("#upload_form").hide("fast");
        $("#upload_error").fadeOut();

        var xhr = new XMLHttpRequest();
        var data = new FormData(document.getElementById("upload_form"));

        // Copies the info of the file in an array and create a new HTML element
        // for the status of the upload of this file.
        var files_info = new Array();
        var total = 0;
        for (var file in files) {
            var info = new Object();
            info.file = file;

            // Creates the HTML element.
            info.div = $("<div>", { class: "upload" });

            var file_title = $("<h3>", { class: "uploaded" });
            file_title.html(file.name);
            info.div.add(file_title);

            var progress = $("<div>", { class: "progress" });
            var progress_complete = $("<div>", { class: "complete" });
            progress.add(progress_complete);
            info.div.add(progress);

            info.changeStatus = function (status, percent) 
            {
                file_title.attr("class", status);
                progress_complete.width(percent+"%");
            }

            info.changeStatus("waiting", 0);

            total += file.size;
            files_info.push(info);
        }

        $("#upload_progress").show("fast");
        $("#upload_global_progress_complete").width(0);
        $("#upload_global_progress").fadeIn();

        uploadFiles(0, total, files_info, new Array(), new Array());
    }

    return false;
});

function uploadFiles(loaded, total, files_info, uploaded, errors)
{
    var info = files_info.pop();

    var data = new FormData();
    data.append("email", $("#email").val());

    var old_percent = 0;
    var old_global_percent = loaded / total * 100;
    var old_global_bytes = 0;
    var old_global_time = new Date().getTime();

    updateGlobalProgress(old_global_percent, 0, 0);
    info.changeStatus("uploading", 0);

    var xhr = new XMLHttpRequest();

    xhr.upload.addEventListener("progress", function (e) {
        var percent = parseInt(e.loaded / e.total * 100);

        // Doesn't update if no change.
        if (percent != old_percent) {
            info.changeStatus("uploading", percent);

            old_percent = percent;
        }

        var global_bytes = loaded + e.loaded;
        var global_percent = parseInt(global_bytes / total * 100);

        if (global_percent != old_global_percent) {
            new_time = new Date().getTime();

            updateGlobalProgress(old_global_percent, 0, 0);

            old_global_bytes = global_bytes;
            old_time = new_time;
        }
    }, false);

    xhr.addEventListener("load", function (e) {
        res = jQuery.parseJSON(e.target.responseText)[0];

        if (typeof(res) == "string") { // error, skips the file
            info.changeStatus("error", 100);
            errors.push({ filename: info.file.name, error: res });
        } else {
            alert(res.url);
            uploaded.push(res.id);
        }

        continueUpload(
            loaded + info.file.size, total, files_info, uploaded, errors
        );

    }, false);

    restoreUploadForm();

    xhr.addEventListener("error", function (e) {
                    info.changeStatus("error", 100);
            errors.push({ filename: info.file.name, error: res });
        
        showError("An error occured during the upload, please try again.");
    }, false);

    xhr.addEventListener("abort", function (e) {
        restoreUploadForm();
    }, false);

    xhr.open("POST", "@{UploadR}");
    xhr.send(data);
}

// Starts the next upload if the remaining file to upload is not empty.
// Redirects to the page of the first upload if there is no more file to upload.
function continueUpload(loaded, total, files_info, uploaded, errors)
{
    if (files_info.length == 0) { // No more upload
        restoreUploadForm();

        if (uploaded.length > 0) { 
            // At least one file has been successfully uploaded.
            // Redirects to the download page.
            for (var error in errors) {
                
            }
        } else {
            
        }
    } else
        uploadFiles(loaded, total, files_info, uploaded, error);
}

// Returns an error message which explains how some files failed to be uploaded.
function errorsToStr(errors, new_page)
{
    var str = "The following files failed to be uploaded :" + new_page;

    for (var error in errors)
        str += error.filename + " : " + error.error + new_page;

    return str;
}

// Restores the upload form and hides the current uploads status.
function restoreUploadForm()
{
    $("#upload_progress").hide("fast");
    $("#upload_form").show("fast");
    document.title = originalTitle;

    $("#upload_global_progress").fadeOut();
    $("#upload_status").html("");
    $("#upload_speed").html("");
    $("#uploads").html("");
}

// Returns the list of the files which are to large to be uploaded.
function largeFiles(files)
{
    var l = [];
    for (var i = 0; i < files.length; i++) {
        var f = files[i];
        if (f.size > #{show maxFileSize})
            l.push(f.name);
    }

    return l;
}

// Shows the error message above the upload form.
function showError(message) 
{
    var error = $("#upload_error");
    error.html(message);
    error.fadeIn();
}

// Update the different elements of the interface with the status of the upload,
// given the percent of the upload, and the number of bytes transmitted during
// the elapsed time.
function updateGlobalProgress(percent, bytes, elapsed)
{
    if (percent < 100) {
        $("#upload_status").html("Uploading ...");

        var strPercent = percent + "%"
        $("#upload_global_progress").width(strPercent);
        document.title = strPercent + " | " + originalTitle;

        // Computes the speed in bytes per second
        if (elapsed > 0) {
            var speed = bytes * 1000 / elapsed;
            $("#upload_speed").html(prettySpeed(speed));
        } else
            $("#upload_speed").html("");
    } else {
        $("#upload_status").html("Waiting on server response ...");
        document.title = "Waiting ... | " + originalTitle;

        $("#upload_speed").html();
    }
}

// Returns a string with the speed in a human readable way.
function prettySpeed(bytesPerSecond)
{
    var pow1 = 1024;
    var pow2 = pow1 * 1024;
    var pow3 = pow2 * 1024;
    var pow4 = pow3 * 1024;

    // Rounnd the speed two number after the comma.
    function roundSpeed(speed){
        return Math.round(speed * 100) / 100;
    }

    if (bytesPerSecond < 2)
        return bytesPerSecond + " byte/s";
    else if (bytesPerSecond < pow1)
        return bytesPerSecond + " bytes/s";
    else if (bytesPerSecond < pow2)
        return roundSpeed(bytesPerSecond / pow1) + " KiB/s";
    else if (bytesPerSecond < pow3)
        return roundSpeed(bytesPerSecond / pow2) + " MiB/s";
    else if (bytesPerSecond < pow4)
        return roundSpeed(bytesPerSecond / pow2) + " GiB/s";
    else // Boy, this is crazy fast !
        return roundSpeed(bytesPerSecond / pow2) + " TiB/s";
}