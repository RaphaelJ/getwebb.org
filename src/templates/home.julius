// Saves the original title (which will be updated during the upload)
var originalTitle = document.title;

// Changes the privacy of the upload.
function uploadPublic(isPublic)
{
    $("#public_button").toggleClass("enabled", isPublic);
    $("#private_button").toggleClass("enabled", !isPublic);

    $("#public")[0].checked = isPublic;
}
uploadPublic($("#public")[0].checked);

// Shows/Hides the options menu.
$("#options_toggle").click(function ()
{
    $("#options_toggle").toggleClass("enabled");
    $("#options").slideToggle(100);
});

// Maximum size of images in bytes for the thumbnail.
var maxPreviewSize = 5 * 1024 * 1024; // 5 Mio

// Hides the upload form, start the upload and shows the uploads progress.
$("#upload_form").submit(function ()
{
    var files = document.getElementById("files").files;
    if (files.length < 1) {
        // Checks if at least a file as been selected for upload.
        showError("Please select at least one file to upload.");
    } else if ((larges = largeFiles(files)).length > 0) {
        // Checks if some files exceed the maximum file size.
        showError(
            "The following files exceed the maximum file size " +
            "(#{rawJS $ show $ PrettyFileSize maxFileSize}) :<br />" + 
            larges.join("<br />") + "."
        );
    } else if (!document.getElementById("email").checkValidity()) {
        // Checks if the email field is valid.
        showError("Please enter a valid email.");
    } else {
        $("#upload_form").hide("fast");
        $("#upload_error").hide("fast");

        // Copies the info of the file in an array and create a new HTML element
        // for the status of the upload of this file.
        var files_info = new Array();
        var total = 0;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            var info = new Object();
            info.file = file;

            // Creates the HTML element.
            info.div = $("<div>", { class: "upload" });

            // Displays a thumbnail for images.
            var preview = $("<div>", { class: "preview" });
            info.div.append(preview);
            if (
                typeof FileReader !== "undefined" && file.size < maxPreviewSize
                && isImage(file.type)
            ) {
                var preview_img = $("<div>", { class: "img" });
                preview.append(preview_img);
                preview_img.append($("<div>", { class: "border" }));

                var preview_img_tag = $("<img>", {
                    alt: file.name,
                    src: '@{StaticR img_homepage_preview_waiting_png}'
                });
                preview_img.append(preview_img_tag);

                var reader = new FileReader();
                reader.onload = function (img_tag) {
                    return function (img_e) {
                        img_tag.attr("src", img_e.target.result);
                    };
                }(preview_img_tag);
                reader.readAsDataURL(file);
            } else {
                var preview_text = $("<p>");
                preview_text.text("No preview");
                preview.append(preview_text);
            }

            // Displays the name and the progress of an upload.
            var file_status = $("<div>", { class: "status" });
            info.div.append(file_status);

            var file_title = $("<h3>");
            file_title.text(file.name);
            file_status.append(file_title);

            var progress = $("<div>", { class: "progress" });
            var progress_complete = $("<div>", { class: "complete" });
            progress.append(progress_complete);
            file_status.append(progress);

            info.changeStatus = function (filename, title, complete_div) {
                return function (status, percent, url)
                {
                    title.attr("class", status);
                    complete_div.width(percent + "%");

                    // Transforms the title into a link to the file when
                    // downloaded
                    if (url != null) {
                        var link = $("<a>", {
                            href: url,
                            target: "_blank",
                            title: "Open the file in a new window."
                        });
                        link.text(filename);

                        title.empty();
                        title.append(link);
                    }
                }
            } (file.name, file_title, progress_complete);

            $("#uploads").append(info.div);
            $("#uploads").append($("<div>", { class : "clear_float" }));

            info.changeStatus("waiting", 0, null);

            total += file.size;
            files_info.push(info);
        }

        $("#upload_progress").show("fast");
        $("#upload_global_progress_complete").width(0);
        $("#upload_global_progress").show();

        uploadFiles(0, total, files_info, new Array(), new Array());
    }

    return false;
});

// Returns true if the mime-type stands for a JPEG, PNG or GIF image.
function isImage(mime)
{
    var lower = mime.toLowerCase();

    return lower == "image/jpeg" || lower == "image/png"
        || lower == "image/gif";
}

// Uploads the files in files_info one by one.
function uploadFiles(loaded, total, files_info, uploaded, errors)
{
    var info = files_info.shift();

    var data = new FormData();
    data.append("email", $("#email").val());
    data.append("public", $("#public")[0].checked ? "yes" : "no");
    data.append("file", info.file);

    var old_percent = 0;
    var old_global_percent = Math.floor(loaded / total * 100);
    var old_global_bytes = 0;
    var old_global_time = new Date().getTime();

    updateGlobalProgress(old_global_percent, 0, 0);
    info.changeStatus("uploading", 0, null);

    var xhr = new XMLHttpRequest();

    xhr.upload.addEventListener("progress", function (e) {
        var percent = Math.floor(e.loaded / e.total * 100);

        // Doesn't update if no change.
        if (percent != old_percent) {
            info.changeStatus("uploading", percent, null);

            old_percent = percent;
        }

        var global_bytes = loaded + e.loaded;
        var global_percent = Math.floor(global_bytes / total * 100);

        if (global_percent != old_global_percent) {
            new_global_time = new Date().getTime();

            updateGlobalProgress(
                global_percent, global_bytes - old_global_bytes,
                new_global_time - old_global_time
            );

            old_global_percent = global_percent;
            old_global_bytes = global_bytes;
            old_global_time = new_global_time;
        }
    }, false);

    xhr.addEventListener("load", function (e) {
        var status = e.target.status,
            res = jQuery.parseJSON(e.target.responseText);

        if (status == 201) { // 201 created
            info.changeStatus("uploaded", 100, uploadUrl([res.id]));
            // TODO: Pretty print large number
            $("#count_history").html(++countHistory);
            uploaded.push(res.id);
        } else {
            info.changeStatus("error", 100, null);
            errors.push({ filename: info.file.name, error: res[0] });
        }

        continueUpload(
            loaded + info.file.size, total, files_info, uploaded, errors
        );

    }, false);

    xhr.addEventListener("error", function (e) {
        info.changeStatus("error", 100, null);
        errors.push({ filename: info.file.name, error: "Connection error." });
        continueUpload(
            loaded + info.file.size, total, files_info, uploaded, errors
        );
    }, false);

    xhr.addEventListener("abort", function (e) {
        info.changeStatus("error", 100, null);
        errors.push({ filename: info.file.name, error: "Aborted." });
        continueUpload(loaded, total, files_info, uploaded, errors);
    }, false);

    xhr.open("POST", "@{UploadR}");
    xhr.setRequestHeader("Accept", "application/json");
    xhr.send(data);
}

// Starts the next upload if the remaining file to upload is not empty.
// Redirects to the page of the first upload if there is no more file to upload.
function continueUpload(loaded, total, files_info, uploaded, errors)
{
    if (files_info.length == 0) { // No more upload
        restoreUploadForm();
        if (uploaded.length > 0) {
            // At least one file has been successfully uploaded.
            // Redirects to the download page.
            if (errors.length > 0)
                alert(errorsToStr(errors, "\n"));

            document.location.href = uploadUrl(uploaded);
        } else
            showError(errorsToStr(errors, "<br />"));
    } else
        uploadFiles(loaded, total, files_info, uploaded, errors);
}

// Returns an error message which explains how some files failed to be uploaded.
function errorsToStr(errors, new_line)
{
    var str = "The following files failed to be uploaded :" + new_line;

    for (i = 0; i < errors.length; i++) {
        var error = errors[i];
        str += error.filename + " : " + error.error + new_line;
    }

    return str;
}

// Restores the upload form and hides the current uploads status.
function restoreUploadForm()
{
    $("#upload_progress").hide();
    $("#upload_form").show();
    document.title = originalTitle;

    $("#upload_global_progress").hide();
    $("#upload_status").empty();
    $("#upload_speed").empty();
    $("#uploads").empty();
}

// Returns the list of the files which are to large to be uploaded.
function largeFiles(files)
{
    var l = [];
    for (var i = 0; i < files.length; i++) {
        var f = files[i];
        if (f.size > #{rawJS $ show maxFileSize})
            l.push(f.name);
    }

    return l;
}

// Shows the error message above the upload form.
function showError(message) 
{
    var error = $("#upload_error");
    error.html(message);
    error.fadeIn();
}

// Update the different elements of the interface with the status of the upload,
// given the status of the upload, and the number of bytes transmitted during
// the elapsed time.
function updateGlobalProgress(percent, step_bytes, step_elapsed)
{
    var strPercent = percent.toString() + "%"
    $("#upload_global_progress_complete").width(strPercent);

    if (percent < 100) {
        $("#upload_status").text("Uploading ...");
        document.title = strPercent + " | " + originalTitle;

        // Computes the speed in bytes per second
        if (step_elapsed > 0) {
            var speed = step_bytes * 1000 / step_elapsed;
            $("#upload_speed").text(prettySpeed(speed));
        } else
            $("#upload_speed").empty();
    } else {
        $("#upload_status").text("Waiting on server response ...");
        document.title = "Waiting ... | " + originalTitle;

        $("#upload_speed").html();
    }
}

// Returns a string with the speed in a human readable way.
function prettySpeed(bytesPerSecond)
{
    var pow1 = 1024;
    var pow2 = pow1 * 1024;
    var pow3 = pow2 * 1024;
    var pow4 = pow3 * 1024;

    // Rounds the speed two number after the comma.
    function roundSpeed(speed) {
        return Math.round(speed * 100) / 100;
    }

    if (bytesPerSecond < 2)
        return bytesPerSecond + " byte/s";
    else if (bytesPerSecond < pow1)
        return bytesPerSecond + " bytes/s";
    else if (bytesPerSecond < pow2)
        return roundSpeed(bytesPerSecond / pow1) + " KiB/s";
    else if (bytesPerSecond < pow3)
        return roundSpeed(bytesPerSecond / pow2) + " MiB/s";
    else if (bytesPerSecond < pow4)
        return roundSpeed(bytesPerSecond / pow2) + " GiB/s";
    else // Boy, this is crazy fast !
        return roundSpeed(bytesPerSecond / pow2) + " TiB/s";
}

// Returns the url to the file(s) from an array of IDs.
function uploadUrl(hmacs)
{
    // Yesod generates an - at the end of empty string url. Removes it.
    var viewRoute = "@{ViewR ""}";
    viewRoute = viewRoute.substr(0, viewRoute.length - 1);
    return viewRoute + hmacs.join(",");
}

// Add a sprintf-like method to String objects.
String.prototype.format = function() 
{
    var formatted = this;
    for (var i = 0; i < arguments.length; i++) {
        var regexp = new RegExp('\\{'+i+'\\}', 'gi');
        formatted = formatted.replace(regexp, arguments[i]);
    }
    return formatted;
}
