// Decrements the number of available characters in the new comment form.
var new_comment_text = $("#new_comment #comment_message");
new_comment_text.keyup(function (e)
{
    var remain = #{rawJS $ show maxCommentLength} - new_comment_text.val().length;
    var chars_left = $("#comment_chars_left");
    var negative = remain < 0;

    chars_left.text(remain);
    chars_left.toggleClass("negative", negative);
    var disabled = negative ? "disabled" : null
    $("#new_comment #comment_submit").attr("disabled", disabled);
});

// Posts the new comment using a POST request to the form's action URI.
function commentNew(form)
{
    var jquery_form = $(form);
    var textarea = $("textarea", form);
    var submit   = $("input[type=submit]", form);
    if (textarea.val().length < 1) {
        alert("A message is required.");
        return;
    }

    // Saves the message before disabling the form.
    var data = jquery_form.serialize();

    textarea.attr("disabled", "disabled");
    submit.attr("disabled", "disabled");

    $.ajax({
        type: "POST",
        url: jquery_form.attr("action"),
        data: data,
        dataType: "json"
    }).done(function (data, status, xhr) {
        // Resets the form
        textarea.val(null);
        textarea.keyup();

        // Increments the number of comments of the upload.
        $("#comments_count").text(prettyNumber(++commentsCount));

        var voteUri = data.uri;
        getComment(voteUri, function (commentData) {
            // Removes the comment saying that nobody has commented the upload.
            var parent = $("#comments");
            var ul;
            if (commentsCount == 1) {
                parent.find("p.notice").remove();
                ul = $("<ul>");
                parent.append(ul);
            } else
                ul = parent.find("ul");

            // Creates a new HTML element containing the comment.
            var li = $("<li>").attr("id", "comment_" + commentData.id)
                              .hide()
                              .prependTo(ul);
            if (userIsOwner)
                li.addClass("owner");

            $("<div>").addClass("avatar")
                      .append($("<img>", { alt: "Avatar", src: userAvatar }))
                      .appendTo(li);

            var message = $("<div>").addClass("message")
                                    .appendTo(li);

            $("<a>").addClass("author")
                    .attr("href", "#")
                    .text(commentData.user.name)
                    .appendTo(message);
            message.append(" ");

            $("<span>").addClass("date")
                       .text("few moments ago")
                       .appendTo(message);
            message.append(" ");

            var actions = $("<span>").addClass("actions")
                                     .appendTo(message);

            $("<span>").addClass("button").addClass("upvotes")
                       .toggleClass("enabled", commentData.vote == "upvote")
                       .click(function () {
                           commentVote(
                               commentData.id, voteUri, voteUri + "/up"
                           );
                       })
                       .text("↑ Upvote ")
                       .append(
                            $("<span>").addClass("count")
                                       .text(commentData.upvotes)
                       )
                       .append(" ")
                       .appendTo(actions);

            $("<span>").addClass("button").addClass("downvotes")
                       .toggleClass("enabled", commentData.vote == "downvote")
                       .click(function () {
                           commentVote(
                               commentData.id, voteUri, voteUri + "/down"
                           );
                       })
                       .text("↓ Downvote ")
                       .append(
                            $("<span>").addClass("count")
                                       .text(commentData.downvotes)
                       )
                       .append(" ")
                       .appendTo(actions);

            $("<span>").addClass("button").addClass("remove")
                       .click(function () {
                           commentRemove(commentData.id, voteUri);
                       })
                       .text("⨯ Remove ")
                       .appendTo(actions);

            $("<p>").addClass("content")
                    .html(escapeHtml(commentData.message))
                    .appendTo(message);

            li.slideDown();
        });

    }).fail(function (xhr, status, error) {
        if (xhr.status == 403)
            alert("You don't have the permission to post a comment.");
        else if (xhr.status == 404)
            alert("The file doesn't exist.");
        else if (xhr.status == 429) { // Too many requests
            var res = jQuery.parseJSON(xhr.responseText);
            alert(res[0]);
        } else {
            alert("Failed to post the comment.");
            showErrorResponse(xhr);
        }
    }).always(function () {
        textarea.attr("disabled", null);
        submit.attr("disabled", null);
    });
}

// Removes the given comment by sending a DELETE request to the comment's URI.
function commentRemove(commentHmac, commentUri)
{
    $.ajax({
        type: "DELETE",
        url: commentUri
    }).done(function (data, status, xhr) {
        var comment = $("#comment_" + commentHmac);
        comment.slideUp(function () {
            comment.remove();

            // Decrements the number of comments of the upload.
            $("#comments_count").text(prettyNumber(--commentsCount));

            if (commentsCount == 0) {
                var parent = $("#comments");
                parent.find("ul").remove();
                parent.append(
                    $("<p>").addClass("notice")
                            .text("Nobody has commented this file yet.")
                );
            }
        });
    }).fail(function (xhr, status, error) {
        if (xhr.status == 403)
            alert("You don't have the permission to remove for a comment.");
        else if (xhr.status == 404)
            alert("The comment doesn't exist.");
        else {
            alert("Failed to remove the comment.");
            showErrorResponse(xhr);
        }
    });
}

// Votes for a comment by sending a PUT request to the given vote's URI.
function commentVote(commentHmac, commentUri, voteUri)
{
    $.ajax({
        type: "PUT",
        url: voteUri
    }).done(function (data, status, xhr) {
        // Reloads the new comment status from the server.
        getComment(commentUri, function (commentData) {
            var comment = $("#comment_" + commentHmac.toString());
            var upvotes = comment.find(".upvotes"),
                downvotes = comment.find(".downvotes");

            // Updates the number of votes.
            upvotes.find(".count")
                    .text(prettyNumber(commentData.upvotes));
            downvotes.find(".count")
                        .text(prettyNumber(commentData.downvotes));

            // Updates the status of vote buttons.
            upvotes.toggleClass(
                "enabled", commentData.vote == "upvote"
            );
            downvotes.toggleClass(
                "enabled", commentData.vote == "downvote"
            );
        });
    }).fail(function (xhr, status, error) {
        if (xhr.status == 403)
            alert("You don't have the permission to vote for a comment.");
        else if (xhr.status == 404)
            alert("The comment doesn't exist.");
        else {
            alert("Failed to vote for the comment.");
            showErrorResponse(xhr);
        }
    });
}

// Sends an asynchronous GET request to retrieve the comment.
// Executes the callback with the JSON object corresponding to the comment as
// argument.
function getComment(commentUri, commentCallback)
{
    $.ajax({
        type: "GET",
        url: commentUri,
        dataType: "json"
    }).done(function (data, status, xhr) {
        commentCallback(data);
    }).fail(function (xhr, status, error) {
        if (xhr.status == 404)
            alert("The comment doesn't exist.");
        else {
            alert("Failed to retrieve the comment.");
            showErrorResponse(xhr);
        }
    });
}
